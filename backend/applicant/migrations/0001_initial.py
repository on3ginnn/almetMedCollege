<<<<<<< HEAD
# Generated by Django 4.2 on 2025-06-12 17:39
=======
# Generated by Django 4.2 on 2025-06-13 07:10
>>>>>>> 79430a5aea5fd9070f18927d1b5f2d9edaefe5e6

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Applicant',
            fields=[
<<<<<<< HEAD
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('citizenship', models.CharField(max_length=100, verbose_name='Гражданство')),
                ('nationality', models.CharField(max_length=100, verbose_name='Национальность')),
                ('birth_date', models.DateField(verbose_name='Дата рождения')),
                ('birth_place', models.CharField(max_length=255, verbose_name='Место рождения')),
                ('address', models.TextField(verbose_name='Адрес места жительства по паспорту')),
                ('address_actual', models.TextField(verbose_name='Фактический адрес места жительства')),
                ('passport_division_code', models.CharField(max_length=6, verbose_name='Код подразделения')),
                ('passport_registration_date', models.DateField(verbose_name='Дата регистрации прописки по паспорту')),
                ('certificate_series', models.CharField(max_length=14, verbose_name='Номер аттестата')),
                ('certificate_issued_date', models.DateField(verbose_name='Дата выдачи аттестата')),
                ('graduation_year', models.DateField(verbose_name='Год окончания учебного заведения')),
                ('graduation_institution', models.CharField(max_length=255, verbose_name='Наименование учебного заведения')),
                ('passport_series', models.CharField(max_length=4, verbose_name='Серия паспорта')),
                ('passport_number', models.CharField(max_length=6, verbose_name='Номер паспорта')),
                ('passport_issued_by', models.CharField(max_length=255, verbose_name='Кем выдан')),
                ('passport_issued_date', models.DateField(verbose_name='Дата выдачи')),
                ('inn', models.CharField(max_length=12, verbose_name='ИНН')),
                ('snils', models.CharField(max_length=11, verbose_name='СНИЛС')),
                ('medical_policy', models.CharField(max_length=100, verbose_name='Медицинский полис')),
                ('military_id', models.BooleanField(verbose_name='Приписное свидетельство (да/нет)')),
                ('student_phone', models.CharField(max_length=20, verbose_name='Телефон абитуриента')),
                ('student_email', models.EmailField(max_length=254, verbose_name='Email абитуриента')),
                ('mother_name', models.CharField(max_length=255, verbose_name='ФИО мамы')),
                ('mother_phone', models.CharField(max_length=20, verbose_name='Телефон мамы')),
                ('mother_job', models.CharField(max_length=255, verbose_name='Место работы и должность мамы')),
                ('mother_passport_series', models.CharField(max_length=4, verbose_name='Серия паспорта')),
                ('mother_passport_number', models.CharField(max_length=6, verbose_name='Номер паспорта')),
                ('mother_passport_issued_by', models.CharField(max_length=255, verbose_name='Кем выдан')),
                ('mother_passport_issued_date', models.DateField(verbose_name='Дата выдачи')),
                ('father_name', models.CharField(max_length=255, verbose_name='ФИО папы')),
                ('father_phone', models.CharField(max_length=20, verbose_name='Телефон папы')),
                ('father_job', models.CharField(max_length=255, verbose_name='Место работы и должность папы')),
                ('father_passport_series', models.CharField(max_length=4, verbose_name='Серия паспорта')),
                ('father_passport_number', models.CharField(max_length=6, verbose_name='Номер паспорта')),
                ('father_passport_issued_by', models.CharField(max_length=255, verbose_name='Кем выдан')),
                ('father_passport_issued_date', models.DateField(verbose_name='Дата выдачи')),
                ('documents_delivered', models.BooleanField(default=False, verbose_name='Статус сдал документы')),
                ('specialty', models.CharField(choices=[('pharmacy', 'Фармация'), ('nursing', 'Сестринское дело'), ('midwifery', 'Акушерское дело'), ('lab_diagnostics', 'Лабораторная диагностика'), ('medical_treatment', 'Лечебное дело')], max_length=50, verbose_name='Специальность')),
                ('grade_russian', models.IntegerField(validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Русский язык')),
                ('grade_biology', models.IntegerField(validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Биология')),
                ('grade_chemistry', models.IntegerField(validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Химия')),
                ('grade_math', models.IntegerField(validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Математика')),
                ('grade_language', models.IntegerField(validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Иностранный язык')),
                ('grade_physics', models.IntegerField(validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Физика')),
                ('average_grade', models.FloatField(verbose_name='Средний балл')),
                ('admission_type', models.CharField(choices=[('бюджет', 'Бюджет'), ('коммерция', 'Коммерция')], max_length=50, verbose_name='Бюджет/коммерция')),
                ('needs_dormitory', models.BooleanField(verbose_name='Нуждается в общежитии')),
                ('enrolled', models.BooleanField(default=False, verbose_name='Зачислен')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата подачи')),
=======
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("full_name", models.CharField(max_length=255, verbose_name="ФИО")),
                (
                    "citizenship",
                    models.CharField(max_length=100, verbose_name="Гражданство"),
                ),
                (
                    "nationality",
                    models.CharField(max_length=100, verbose_name="Национальность"),
                ),
                ("birth_date", models.DateField(verbose_name="Дата рождения")),
                (
                    "birth_place",
                    models.CharField(max_length=255, verbose_name="Место рождения"),
                ),
                (
                    "address",
                    models.TextField(verbose_name="Адрес места жительства по паспорту"),
                ),
                (
                    "address_actual",
                    models.TextField(verbose_name="Фактический адрес места жительства"),
                ),
                (
                    "passport_division_code",
                    models.CharField(max_length=6, verbose_name="Код подразделения"),
                ),
                (
                    "passport_registration_date",
                    models.DateField(
                        verbose_name="Дата регистрации прописки по паспорту"
                    ),
                ),
                (
                    "certificate_series",
                    models.CharField(max_length=14, verbose_name="Номер аттестата"),
                ),
                (
                    "certificate_issued_date",
                    models.DateField(verbose_name="Дата выдачи аттестата"),
                ),
                (
                    "graduation_year",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1900, "Год должен быть не ранее 1900"
                            ),
                            django.core.validators.MaxValueValidator(
                                2025, "Год не может быть в будущем"
                            ),
                        ],
                        verbose_name="Год окончания учебного заведения",
                    ),
                ),
                (
                    "graduation_institution",
                    models.CharField(
                        max_length=255, verbose_name="Наименование учебного заведения"
                    ),
                ),
                (
                    "passport_series",
                    models.CharField(max_length=4, verbose_name="Серия паспорта"),
                ),
                (
                    "passport_number",
                    models.CharField(max_length=6, verbose_name="Номер паспорта"),
                ),
                (
                    "passport_issued_by",
                    models.CharField(max_length=255, verbose_name="Кем выдан"),
                ),
                ("passport_issued_date", models.DateField(verbose_name="Дата выдачи")),
                ("inn", models.CharField(max_length=12, verbose_name="ИНН")),
                ("snils", models.CharField(max_length=11, verbose_name="СНИЛС")),
                (
                    "medical_policy",
                    models.CharField(max_length=100, verbose_name="Медицинский полис"),
                ),
                (
                    "military_id",
                    models.BooleanField(
                        verbose_name="Приписное свидетельство (для юношей)"
                    ),
                ),
                (
                    "student_phone",
                    models.CharField(max_length=20, verbose_name="Телефон абитуриента"),
                ),
                (
                    "student_email",
                    models.EmailField(max_length=254, verbose_name="Email абитуриента"),
                ),
                (
                    "mother_name",
                    models.CharField(max_length=255, verbose_name="ФИО мамы"),
                ),
                (
                    "mother_phone",
                    models.CharField(max_length=20, verbose_name="Телефон мамы"),
                ),
                (
                    "mother_job",
                    models.CharField(
                        max_length=255, verbose_name="Место работы и должность мамы"
                    ),
                ),
                (
                    "mother_passport_series",
                    models.CharField(max_length=4, verbose_name="Серия паспорта"),
                ),
                (
                    "mother_passport_number",
                    models.CharField(max_length=6, verbose_name="Номер паспорта"),
                ),
                (
                    "mother_passport_issued_by",
                    models.CharField(max_length=255, verbose_name="Кем выдан"),
                ),
                (
                    "mother_passport_issued_date",
                    models.DateField(verbose_name="Дата выдачи"),
                ),
                (
                    "father_name",
                    models.CharField(max_length=255, verbose_name="ФИО папы"),
                ),
                (
                    "father_phone",
                    models.CharField(max_length=20, verbose_name="Телефон папы"),
                ),
                (
                    "father_job",
                    models.CharField(
                        max_length=255, verbose_name="Место работы и должность папы"
                    ),
                ),
                (
                    "father_passport_series",
                    models.CharField(max_length=4, verbose_name="Серия паспорта"),
                ),
                (
                    "father_passport_number",
                    models.CharField(max_length=6, verbose_name="Номер паспорта"),
                ),
                (
                    "father_passport_issued_by",
                    models.CharField(max_length=255, verbose_name="Кем выдан"),
                ),
                (
                    "father_passport_issued_date",
                    models.DateField(verbose_name="Дата выдачи"),
                ),
                (
                    "documents_delivered",
                    models.BooleanField(
                        default=False, verbose_name="Статус сдал документы"
                    ),
                ),
                (
                    "specialty",
                    models.CharField(
                        choices=[
                            ("pharmacy_9", "Фармация - на базе 9 класса"),
                            ("nursing_9", "Сестринское дело - на базе 9 класса"),
                            (
                                "nursing_11_part_time",
                                "Сестринское дело - очно-заочная форма, на базе 11 класса",
                            ),
                            ("midwifery_9", "Акушерское дело - на базе 9 класса"),
                            (
                                "lab_diagnostics_9",
                                "Лабораторная диагностика - на базе 9 класса",
                            ),
                            ("medical_treatment_9", "Лечебное дело - на базе 9 класса"),
                            (
                                "medical_treatment_11",
                                "Лечебное дело - на базе 11 класса",
                            ),
                        ],
                        max_length=50,
                        verbose_name="Специальность",
                    ),
                ),
                (
                    "grade_russian",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                3, "Оценка должна быть не менее 3"
                            ),
                            django.core.validators.MaxValueValidator(
                                5, "Оценка должна быть не более 5"
                            ),
                        ],
                        verbose_name="Русский язык",
                    ),
                ),
                (
                    "grade_biology",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                3, "Оценка должна быть не менее 3"
                            ),
                            django.core.validators.MaxValueValidator(
                                5, "Оценка должна быть не более 5"
                            ),
                        ],
                        verbose_name="Биология",
                    ),
                ),
                (
                    "grade_chemistry",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                3, "Оценка должна быть не менее 3"
                            ),
                            django.core.validators.MaxValueValidator(
                                5, "Оценка должна быть не более 5"
                            ),
                        ],
                        verbose_name="Химия",
                    ),
                ),
                (
                    "grade_math",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                3, "Оценка должна быть не менее 3"
                            ),
                            django.core.validators.MaxValueValidator(
                                5, "Оценка должна быть не более 5"
                            ),
                        ],
                        verbose_name="Математика",
                    ),
                ),
                (
                    "grade_language",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                3, "Оценка должна быть не менее 3"
                            ),
                            django.core.validators.MaxValueValidator(
                                5, "Оценка должна быть не более 5"
                            ),
                        ],
                        verbose_name="Иностранный язык",
                    ),
                ),
                (
                    "grade_physics",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                3, "Оценка должна быть не менее 3"
                            ),
                            django.core.validators.MaxValueValidator(
                                5, "Оценка должна быть не более 5"
                            ),
                        ],
                        verbose_name="Физика",
                    ),
                ),
                ("average_grade", models.FloatField(verbose_name="Средний балл")),
                (
                    "admission_type",
                    models.CharField(
                        choices=[("бюджет", "Бюджет"), ("коммерция", "Коммерция")],
                        max_length=50,
                        verbose_name="Бюджет/коммерция",
                    ),
                ),
                (
                    "needs_dormitory",
                    models.BooleanField(verbose_name="Нуждается в общежитии"),
                ),
                (
                    "priority_enrollment",
                    models.CharField(
                        choices=[
                            (
                                "heroes_rf",
                                "Герои Российской Федерации, лица, награжденные тремя орденами Мужества",
                            ),
                            (
                                "svo_participants",
                                "Участники боевых действий и служащие на территориях СВО и граничащих с ними, а также их дети",
                            ),
                            (
                                "covid_med_workers",
                                "Дети умерших от COVID-19 медработников",
                            ),
                            ("none", "Не отношусь ни к одной из категорий"),
                        ],
                        default="none",
                        max_length=50,
                        verbose_name="Первоочередное зачисление",
                    ),
                ),
                (
                    "preferential_enrollment",
                    models.CharField(
                        choices=[
                            (
                                "orphans",
                                "Дети-сироты и дети, оставшиеся без попечения родителей",
                            ),
                            ("disabled", "Дети-инвалиды, инвалиды 1-2 группы"),
                            ("veterans", "Ветераны и участники боевых действий"),
                            (
                                "low_income_disabled",
                                "Дети младше 20 лет из неполных малоимущих семей, если их родители — инвалиды I группы",
                            ),
                            (
                                "chernobyl",
                                "Люди, пострадавшие от аварии на Чернобыльской АЭС",
                            ),
                            (
                                "military_personnel",
                                "Военнослужащие и сотрудники силовых ведомств, а также их дети",
                            ),
                            ("none", "Не отношусь ни к одной из категорий"),
                        ],
                        default="none",
                        max_length=50,
                        verbose_name="Преимущественное право на зачисление",
                    ),
                ),
                (
                    "enrolled",
                    models.BooleanField(default=False, verbose_name="Зачислен"),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата подачи"),
                ),
>>>>>>> 79430a5aea5fd9070f18927d1b5f2d9edaefe5e6
            ],
        ),
    ]
