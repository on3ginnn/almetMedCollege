# Generated by Django 4.2 on 2025-06-30 00:10

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(blank=True, default='', max_length=10, verbose_name='Регистрационный номер')),
                ('full_name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('citizenship', models.CharField(blank=True, max_length=100, verbose_name='Гражданство')),
                ('nationality', models.CharField(blank=True, max_length=100, verbose_name='Национальность')),
                ('birth_date', models.DateField(verbose_name='Дата рождения')),
                ('birth_place', models.CharField(blank=True, max_length=255, verbose_name='Место рождения')),
                ('address', models.TextField(blank=True, verbose_name='Адрес места жительства по паспорту')),
                ('address_actual', models.TextField(verbose_name='Фактический адрес места жительства')),
                ('certificate_series', models.CharField(blank=True, max_length=14, verbose_name='Номер аттестата')),
                ('certificate_issued_date', models.DateField(blank=True, null=True, verbose_name='Дата выдачи аттестата')),
                ('graduation_year', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1980, 'Год должен быть не ранее 1980'), django.core.validators.MaxValueValidator(2025, 'Год не может быть в будущем')], verbose_name='Год окончания учебного заведения')),
                ('graduation_institution', models.CharField(blank=True, max_length=255, verbose_name='Наименование учебного заведения')),
                ('passport_series', models.CharField(blank=True, max_length=4, verbose_name='Серия паспорта')),
                ('passport_number', models.CharField(blank=True, max_length=6, verbose_name='Номер паспорта')),
                ('passport_issued_by', models.CharField(blank=True, max_length=255, verbose_name='Кем выдан')),
                ('passport_issued_date', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('passport_division_code', models.CharField(blank=True, max_length=6, verbose_name='Код подразделения')),
                ('passport_registration_date', models.DateField(blank=True, null=True, verbose_name='Дата регистрации прописки по паспорту')),
                ('inn', models.CharField(blank=True, max_length=12, verbose_name='ИНН')),
                ('snils', models.CharField(max_length=11, verbose_name='СНИЛС')),
                ('medical_policy', models.CharField(blank=True, max_length=100, verbose_name='Медицинский полис')),
                ('military_id', models.BooleanField(default=False, verbose_name='Приписное свидетельство (для юношей)')),
                ('medical_contract', models.BooleanField(default=False, verbose_name='Наличие договора или ходатайства с медицинской организацией')),
                ('student_phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон абитуриента')),
                ('student_email', models.EmailField(blank=True, max_length=254, verbose_name='Email абитуриента')),
                ('representative1_name', models.CharField(blank=True, max_length=255, verbose_name='ФИО представителя 1 (мама/жена)')),
                ('representative1_phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон представителя 1')),
                ('representative1_job', models.CharField(blank=True, max_length=255, verbose_name='Место работы и должность представителя 1')),
                ('representative1_passport_series', models.CharField(blank=True, max_length=4, verbose_name='Серия паспорта представителя 1')),
                ('representative1_passport_number', models.CharField(blank=True, max_length=6, verbose_name='Номер паспорта представителя 1')),
                ('representative1_passport_issued_by', models.CharField(blank=True, max_length=255, verbose_name='Кем выдан паспорт представителя 1')),
                ('representative1_passport_issued_date', models.DateField(blank=True, null=True, verbose_name='Дата выдачи паспорта представителя 1')),
                ('representative2_name', models.CharField(blank=True, max_length=255, verbose_name='ФИО представителя 2 (папа/муж)')),
                ('representative2_phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон представителя 2')),
                ('representative2_job', models.CharField(blank=True, max_length=255, verbose_name='Место работы и должность представителя 2')),
                ('representative2_passport_series', models.CharField(blank=True, max_length=4, verbose_name='Серия паспорта представителя 2')),
                ('representative2_passport_number', models.CharField(blank=True, max_length=6, verbose_name='Номер паспорта представителя 2')),
                ('representative2_passport_issued_by', models.CharField(blank=True, max_length=255, verbose_name='Кем выдан паспорт представителя 2')),
                ('representative2_passport_issued_date', models.DateField(blank=True, null=True, verbose_name='Дата выдачи паспорта представителя 2')),
                ('documents_delivered', models.BooleanField(default=False, verbose_name='Статус сдал документы')),
                ('specialty', models.CharField(choices=[('pharmacy', 'Фармация'), ('nursing', 'Сестринское дело'), ('midwifery', 'Акушерское дело'), ('lab_diagnostics', 'Лабораторная диагностика'), ('medical_treatment', 'Лечебное дело')], max_length=50, verbose_name='Специальность')),
                ('education_base', models.CharField(choices=[('9', 'На базе 9 классов'), ('11', 'На базе 11 классов')], max_length=2, verbose_name='База образования')),
                ('admission_type', models.CharField(choices=[('бюджет', 'Финансируемые из средств бюджета Республики Татарстан'), ('коммерция', 'На места с полным возмещением затрат'), ('none', 'Не выбранно')], default='none', max_length=50, verbose_name='Бюджет/коммерция')),
                ('needs_dormitory', models.BooleanField(default=False, verbose_name='Нуждается в общежитии')),
                ('documents_submitted', models.CharField(choices=[('оригинал', 'Оригинал'), ('копия', 'Копия'), ('none', 'Не выбранно')], default='none', max_length=10, verbose_name='Тип поданных документов')),
                ('study_form', models.CharField(blank=True, choices=[('очная', 'Очная форма обучения'), ('очно-заочная', 'Очно-заочная (вечерняя) форма обучения')], max_length=20, verbose_name='Форма обучения')),
                ('priority_enrollment', models.CharField(choices=[('heroes_rf', 'Герои Российской Федерации, лица, награжденные тремя орденами Мужества'), ('svo_participants', 'Участники боевых действий и служащие на территориях СВО и граничащих с ними, а также их дети'), ('covid_med_workers', 'Дети умерших от COVID-19 медработников'), ('none', 'Не отношусь ни к одной из категорий')], default='none', max_length=50, verbose_name='Первоочередное зачисление')),
                ('preferential_enrollment', models.CharField(choices=[('orphans', 'Дети-сироты и дети, оставшиеся без попечения родителей'), ('disabled', 'Дети-инвалиды, инвалиды 1-2 группы'), ('veterans', 'Ветераны и участники боевых действий'), ('low_income_disabled', 'Дети младше 20 лет из неполных малоимущих семей, если их родители — инвалиды I группы'), ('chernobyl', 'Люди, пострадавшие от аварии на Чернобыльской АЭС'), ('military_personnel', 'Военнослужащие и сотрудники силовых ведомств, а также их дети'), ('none', 'Не отношусь ни к одной из категорий')], default='none', max_length=50, verbose_name='Преимущественное право на зачисление')),
                ('grade_russian', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Оценка по русскому языку')),
                ('grade_biology', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Оценка по биологии')),
                ('grade_chemistry', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Оценка по химии')),
                ('grade_math', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Оценка по математике')),
                ('grade_language', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Оценка по иностранному языку')),
                ('grade_physics', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Оценка по физике')),
                ('average_grade', models.FloatField(validators=[django.core.validators.MinValueValidator(3.0, message='Средний балл не может быть ниже 3.00'), django.core.validators.MaxValueValidator(5.0, message='Средний балл не может быть выше 5.00')], verbose_name='Заявленный средний балл')),
                ('enrolled', models.BooleanField(default=False, verbose_name='Зачислен')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата подачи')),
            ],
        ),
        migrations.CreateModel(
            name='ApplicantSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_name', models.CharField(max_length=100, verbose_name='Название предмета')),
                ('grade', models.IntegerField(validators=[django.core.validators.MinValueValidator(3, 'Оценка должна быть не менее 3'), django.core.validators.MaxValueValidator(5, 'Оценка должна быть не более 5')], verbose_name='Оценка')),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='applicant.applicant')),
            ],
            options={
                'unique_together': {('applicant', 'subject_name')},
            },
        ),
    ]
